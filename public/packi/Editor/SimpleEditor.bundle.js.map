{"version":3,"sources":["webpack://wizzi.editor/./src/components/Editor/SimpleEditor.tsx","webpack://wizzi.editor/./node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js"],"names":["SimpleEditor","content","language","contentValue","setContentValue","useState","useEffect","Prism","className","value","onChange","evt","target","onKeyDown","selStartPos","currentTarget","selectionStart","console","log","key","substring","length","selectionEnd","preventDefault","self","document","PLUGIN_NAME","NEW_LINE_EXP","config","plugins","lineNumbers","getLine","element","number","tagName","classList","contains","lineNumberRows","querySelector","lineNumberStart","parseInt","getAttribute","lineNumberEnd","children","lineIndex","resize","resizeElements","assumeViewportIndependence","getStyles","window","getComputedStyle","currentStyle","lastWidth","undefined","addEventListener","innerWidth","Array","prototype","slice","call","querySelectorAll","hooks","add","env","code","pre","test","nodeName","util","isActive","remove","lineNumbersWrapper","match","linesNum","lines","join","createElement","setAttribute","innerHTML","hasAttribute","style","counterReset","appendChild","run","elements","filter","e","whiteSpace","infos","map","codeElement","lineNumberSizer","codeLines","textContent","split","display","oneLinerHeight","getBoundingClientRect","height","lineHeights","sizer","Boolean","forEach","info","line","index","childIndex","i","wrapper","lineNumber"],"mappings":"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","file":"Editor/SimpleEditor.bundle.js","sourcesContent":["/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.11\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\Editor\\SimpleEditor.tsx.ittf\n*/\nimport React, {FunctionComponent} from 'react';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\n\nimport {useState, useEffect} from \"react\";\nimport Prism from \"prismjs\";\n\nexport interface SimpleEditorProps {\n    content: string;\n    language: string;\n}\n\nexport const SimpleEditor: FunctionComponent<SimpleEditorProps> = ({\n    content, \n    language\n }) => {\n\n    \n    const [contentValue, setContentValue] = useState(content);\n    const handleKeyDown = (evt: React.KeyboardEvent<HTMLInputElement>) => {\n    \n        let value = contentValue,\n            selStartPos = evt.currentTarget.selectionStart;\n        // handle 4-space indent on\n        console.log(evt.currentTarget);\n        if (evt.key === \"Tab\") {\n            value = value.substring(0, selStartPos) + \"    \" + value.substring(selStartPos, value.length);\n            evt.currentTarget.selectionStart = selStartPos + 3;\n            evt.currentTarget.selectionEnd = selStartPos + 4;\n            evt.preventDefault();\n            setContentValue(value);\n        }\n    }\n    ;\n    useEffect(() => \n    \n        Prism.highlightAll()\n    , [\n        language, \n        contentValue\n    ])\n    return  (\n        <div\n         className=\"code-edit-container\">\n            <textarea \n                className=\"code-input\"\n                value={contentValue}\n                onChange={(evt: React.ChangeEvent<HTMLInputElement>) => \n                    \n                        setContentValue(evt.target.value)\n                }\n                onKeyDown={handleKeyDown}\n             />\n            <pre\n             className=\"code-output\">\n                <code\n                 className={`language-${language}`}>\n                    {contentValue}\n                </code>\n            </pre>\n        </div>\n        )\n    ;\n}\n;\nexport default SimpleEditor;\n","(function () {\n\n\tif (typeof self === 'undefined' || !self.Prism || !self.document) {\n\t\treturn;\n\t}\n\n\t/**\n\t * Plugin name which is used as a class name for <pre> which is activating the plugin\n\t * @type {String}\n\t */\n\tvar PLUGIN_NAME = 'line-numbers';\n\n\t/**\n\t * Regular expression used for determining line breaks\n\t * @type {RegExp}\n\t */\n\tvar NEW_LINE_EXP = /\\n(?!$)/g;\n\n\n\t/**\n\t * Global exports\n\t */\n\tvar config = Prism.plugins.lineNumbers = {\n\t\t/**\n\t\t * Get node for provided line number\n\t\t * @param {Element} element pre element\n\t\t * @param {Number} number line number\n\t\t * @return {Element|undefined}\n\t\t */\n\t\tgetLine: function (element, number) {\n\t\t\tif (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar lineNumberRows = element.querySelector('.line-numbers-rows');\n\t\t\tif (!lineNumberRows) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n\t\t\tvar lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n\t\t\tif (number < lineNumberStart) {\n\t\t\t\tnumber = lineNumberStart;\n\t\t\t}\n\t\t\tif (number > lineNumberEnd) {\n\t\t\t\tnumber = lineNumberEnd;\n\t\t\t}\n\n\t\t\tvar lineIndex = number - lineNumberStart;\n\n\t\t\treturn lineNumberRows.children[lineIndex];\n\t\t},\n\n\t\t/**\n\t\t * Resizes the line numbers of the given element.\n\t\t *\n\t\t * This function will not add line numbers. It will only resize existing ones.\n\t\t * @param {HTMLElement} element A `<pre>` element with line numbers.\n\t\t * @returns {void}\n\t\t */\n\t\tresize: function (element) {\n\t\t\tresizeElements([element]);\n\t\t},\n\n\t\t/**\n\t\t * Whether the plugin can assume that the units font sizes and margins are not depended on the size of\n\t\t * the current viewport.\n\t\t *\n\t\t * Setting this to `true` will allow the plugin to do certain optimizations for better performance.\n\t\t *\n\t\t * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tassumeViewportIndependence: true\n\t};\n\n\t/**\n\t * Resizes the given elements.\n\t *\n\t * @param {HTMLElement[]} elements\n\t */\n\tfunction resizeElements(elements) {\n\t\telements = elements.filter(function (e) {\n\t\t\tvar codeStyles = getStyles(e);\n\t\t\tvar whiteSpace = codeStyles['white-space'];\n\t\t\treturn whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line';\n\t\t});\n\n\t\tif (elements.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar infos = elements.map(function (element) {\n\t\t\tvar codeElement = element.querySelector('code');\n\t\t\tvar lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n\t\t\tif (!codeElement || !lineNumbersWrapper) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t/** @type {HTMLElement} */\n\t\t\tvar lineNumberSizer = element.querySelector('.line-numbers-sizer');\n\t\t\tvar codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n\t\t\tif (!lineNumberSizer) {\n\t\t\t\tlineNumberSizer = document.createElement('span');\n\t\t\t\tlineNumberSizer.className = 'line-numbers-sizer';\n\n\t\t\t\tcodeElement.appendChild(lineNumberSizer);\n\t\t\t}\n\n\t\t\tlineNumberSizer.innerHTML = '0';\n\t\t\tlineNumberSizer.style.display = 'block';\n\n\t\t\tvar oneLinerHeight = lineNumberSizer.getBoundingClientRect().height;\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\treturn {\n\t\t\t\telement: element,\n\t\t\t\tlines: codeLines,\n\t\t\t\tlineHeights: [],\n\t\t\t\toneLinerHeight: oneLinerHeight,\n\t\t\t\tsizer: lineNumberSizer,\n\t\t\t};\n\t\t}).filter(Boolean);\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lines = info.lines;\n\t\t\tvar lineHeights = info.lineHeights;\n\t\t\tvar oneLinerHeight = info.oneLinerHeight;\n\n\t\t\tlineHeights[lines.length - 1] = undefined;\n\t\t\tlines.forEach(function (line, index) {\n\t\t\t\tif (line && line.length > 1) {\n\t\t\t\t\tvar e = lineNumberSizer.appendChild(document.createElement('span'));\n\t\t\t\t\te.style.display = 'block';\n\t\t\t\t\te.textContent = line;\n\t\t\t\t} else {\n\t\t\t\t\tlineHeights[index] = oneLinerHeight;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lineHeights = info.lineHeights;\n\n\t\t\tvar childIndex = 0;\n\t\t\tfor (var i = 0; i < lineHeights.length; i++) {\n\t\t\t\tif (lineHeights[i] === undefined) {\n\t\t\t\t\tlineHeights[i] = lineNumberSizer.children[childIndex++].getBoundingClientRect().height;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar wrapper = info.element.querySelector('.line-numbers-rows');\n\n\t\t\tlineNumberSizer.style.display = 'none';\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\tinfo.lineHeights.forEach(function (height, lineNumber) {\n\t\t\t\twrapper.children[lineNumber].style.height = height + 'px';\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns style declarations for the element\n\t * @param {Element} element\n\t */\n\tvar getStyles = function (element) {\n\t\tif (!element) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);\n\t};\n\n\tvar lastWidth = undefined;\n\twindow.addEventListener('resize', function () {\n\t\tif (config.assumeViewportIndependence && lastWidth === window.innerWidth) {\n\t\t\treturn;\n\t\t}\n\t\tlastWidth = window.innerWidth;\n\n\t\tresizeElements(Array.prototype.slice.call(document.querySelectorAll('pre.' + PLUGIN_NAME)));\n\t});\n\n\tPrism.hooks.add('complete', function (env) {\n\t\tif (!env.code) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar code = /** @type {Element} */ (env.element);\n\t\tvar pre = /** @type {HTMLElement} */ (code.parentNode);\n\n\t\t// works only for <code> wrapped inside <pre> (not inline)\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Abort if line numbers already exists\n\t\tif (code.querySelector('.line-numbers-rows')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n\t\tif (!Prism.util.isActive(code, PLUGIN_NAME)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove the class 'line-numbers' from the <code>\n\t\tcode.classList.remove(PLUGIN_NAME);\n\t\t// Add the class 'line-numbers' to the <pre>\n\t\tpre.classList.add(PLUGIN_NAME);\n\n\t\tvar match = env.code.match(NEW_LINE_EXP);\n\t\tvar linesNum = match ? match.length + 1 : 1;\n\t\tvar lineNumbersWrapper;\n\n\t\tvar lines = new Array(linesNum + 1).join('<span></span>');\n\n\t\tlineNumbersWrapper = document.createElement('span');\n\t\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');\n\t\tlineNumbersWrapper.className = 'line-numbers-rows';\n\t\tlineNumbersWrapper.innerHTML = lines;\n\n\t\tif (pre.hasAttribute('data-start')) {\n\t\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n\t\t}\n\n\t\tenv.element.appendChild(lineNumbersWrapper);\n\n\t\tresizeElements([pre]);\n\n\t\tPrism.hooks.run('line-numbers', env);\n\t});\n\n\tPrism.hooks.add('line-numbers', function (env) {\n\t\tenv.plugins = env.plugins || {};\n\t\tenv.plugins.lineNumbers = true;\n\t});\n\n}());\n"],"sourceRoot":""}