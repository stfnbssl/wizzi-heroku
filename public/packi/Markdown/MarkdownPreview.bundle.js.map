{"version":3,"sources":["webpack://wizzi.editor/./src/components/Editor/themes/colors-dark.tsx","webpack://wizzi.editor/./src/components/Editor/themes/colors-light.tsx","webpack://wizzi.editor/./src/components/Editor/themes/simple-editor.tsx","webpack://wizzi.editor/./src/components/Markdown/MarkdownPreview.tsx"],"names":["syntax","text","variable","invalid","constant","comment","regexp","annotation","tag","number","string","property","value","keyword","operator","predefined","ui","background","c","selection","indent","active","inactive","css","String","raw","theme","light","lightColors","dark","darkColors","renderer","marked","link","args","this","replace","MarkdownPreview","source","props","html","gfm","silent","highlight","code","lang","grammar","languages","language","escape","sanitize","require","dangerouslySetInnerHTML","__html","className","classnames","styles","content","type","React","withThemeName","StyleSheet","flex","overflow","backgroundColor","color","padding"],"mappings":"kKAOO,MAAMA,EAAuB,CAChCC,KAAM,UACNC,SAAU,UACVC,QAAS,UACTC,SAAU,UACVC,QAAS,UACTC,OAAQ,UACRC,WAAY,UACZC,IAAK,UACLC,OAAQ,UACRC,OAAQ,UACRC,SAAU,UACVC,MAAO,UACPC,QAAS,UACTC,SAAU,UACVC,WAAY,WAEHC,EAAe,CACxBC,YAAYC,OAAE,aAAc,QAC5BjB,KAAM,UACNkB,UAAW,UACXC,OAAQ,CACJC,OAAQ,UACRC,SAAU,a,kFCxBX,MAAMtB,EAAS,CAClBC,KAAM,UACNC,SAAU,UACVC,QAAS,UACTC,SAAU,UACVC,QAAS,UACTC,OAAQ,UACRC,WAAY,UACZC,IAAK,UACLC,OAAQ,UACRC,OAAQ,UACRC,SAAU,UACVC,MAAO,UACPC,QAAS,UACTC,SAAU,UACVC,WAAY,WAEHC,EAAK,CACdC,YAAYC,OAAE,aAAc,SAC5BjB,KAAM,UACNkB,UAAW,UACXC,OAAQ,CACJC,OAAQ,UACRC,SAAU,a,oSCtBlB,MAAMC,EAAMC,OAAOC,IACbC,EAAQ,EACVV,KACAhB,aAMAuB,SARW,I,EAAD,irD,kBAAA,E,0EAUUP,EAAGC,WACdD,EAAGf,KAIEe,EAAGG,UAIHH,EAAGG,UASRnB,EAAOW,SAIPX,EAAOI,SAIPJ,EAAOW,SAQPX,EAAOU,OAKPV,EAAOM,OAOPN,EAAOa,QAIPb,EAAOS,OAIPT,EAAOU,OAKPV,EAAOe,WAOPf,EAAOK,QAIPL,EAAOS,OAQPT,EAAOI,SAQPJ,EAAOc,SAIPd,EAAOK,S,SAIPsB,EAAQD,EAAME,GACdC,EAAOH,EAAMI,G,4rBCjF1B,MAAMC,EAAW,IAAIC,cACrBD,EAASE,KAAO,SAASC,GAErB,OAAOF,kCAAqCG,KAAMD,GAAME,QAAQ,MAAO,uB,IAGrEC,E,gvBACF,WACI,MAAM,OACFC,EADE,MAEFZ,GACCS,KAAKI,MACV,IAAIC,EAAOR,IAAOM,EAAQ,CACtBP,WACAU,KAAK,EACLC,QAAQ,EACRC,UAAW,CAACC,EAAcC,KAEtB,MAAMC,EAAmB,OAATD,EAAgBE,gBAAgBA,YAAUF,GACpDG,EAAoB,OAATH,EAAgB,MAAQA,EACzC,OAAOC,GAAUH,eAAUC,EAAME,EAASE,GAAYC,IAAOL,MAKrE,OADAJ,EAAOU,IAASV,EAAMW,EAAQ,QAE1B,gBAAC,WAAD,KAEI,uBACCC,wBAAyB,CAClBC,OAAQb,GACRc,UAAWC,KAAWhC,SAAIiC,EAAOC,SAAU,gBAAiB,gBACpE,yBACCC,KAAK,WAAWN,wBAAyB,CAClCC,OAAkB,SAAV3B,EAAmBG,EAAOF,W,oBA5B5BgC,aAmC9B,SAAeC,QAAcvB,GACvBmB,EAASK,oBAAkB,CAC7BJ,QAAS,CACLK,KAAM,EACNC,SAAU,OACVC,iBAAiB9C,OAAE,WACnB+C,OAAO/C,OAAE,QACTgD,QAAS,GACT,kBAAkBhD,OAAE,UACpB,2BAA2BA,OAAE,QAC7B,2BAA2BA,OAAE,a","file":"Markdown/MarkdownPreview.bundle.js","sourcesContent":["/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.11\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\Editor\\themes\\colors-dark.tsx.ittf\n*/\nimport {c} from '../../ThemeProvider';\nimport type {SyntaxColors, UIColors} from './colors-light';\nexport const syntax: SyntaxColors = {\n    text: '#d9d7ce', \n    variable: '#d9d7ce', \n    invalid: '#ff3333', \n    constant: '#ff9d45', \n    comment: '#5c6773', \n    regexp: '#95e6cb', \n    annotation: '#5ccfe6', \n    tag: '#80d4ff', \n    number: '#ff9d45', \n    string: '#bae67e', \n    property: '#5ccfe6', \n    value: '#bae67e', \n    keyword: '#ffae57', \n    operator: '#778899', \n    predefined: '#ff00ff'\n };\nexport const ui: UIColors = {\n    background: c('background', 'dark'), \n    text: '#d9d7ce', \n    selection: '#aaaaaa', \n    indent: {\n        active: '#393b41', \n        inactive: '#494b51'\n     }\n };\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.11\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\Editor\\themes\\colors-light.tsx.ittf\n*/\nimport {c} from '../../ThemeProvider';\nexport const syntax = {\n    text: '#5c6773', \n    variable: '#5c6773', \n    invalid: '#ff3333', \n    constant: '#f08c36', \n    comment: '#abb0b6', \n    regexp: '#4dbf99', \n    annotation: '#41a6d9', \n    tag: '#e7c547', \n    number: '#f08c36', \n    string: '#86b300', \n    property: '#41a6d9', \n    value: '#0451a5', \n    keyword: '#f2590c', \n    operator: '#778899', \n    predefined: '#FF00FF'\n };\nexport const ui = {\n    background: c('background', 'light'), \n    text: '#5c6773', \n    selection: '#cccccc', \n    indent: {\n        active: '#e0e0e0', \n        inactive: '#ecebec'\n     }\n };\nexport type SyntaxColors = typeof syntax;\nexport type UIColors = typeof ui;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.11\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\Editor\\themes\\simple-editor.tsx.ittf\n*/\nimport * as darkColors from './colors-dark';\nimport * as lightColors from './colors-light';\nconst css = String.raw;\nconst theme = ({\n    ui, \n    syntax\n }: { \n    ui: lightColors.UIColors;\n    syntax: lightColors.SyntaxColors;\n}) => \n\n    css`\n  .prism-code {\n    background-color: ${ui.background};\n    color: ${ui.text};\n  }\n\n  .prism-code ::selection {\n    background: ${ui.selection};\n  }\n\n  .prism-code ::-moz-selection {\n    background: ${ui.selection};\n  }\n\n  .prism-code textarea {\n    outline: 0;\n  }\n\n  .prism-code .token.tag,\n  .prism-code .token.property {\n    color: ${syntax.property};\n  }\n\n  .prism-code .token.function {\n    color: ${syntax.constant};\n  }\n\n  .prism-code .token.entity {\n    color: ${syntax.property};\n  }\n\n  .prism-code .token.string,\n  .prism-code .token.selector,\n  .prism-code .token.char,\n  .prism-code .token.builtin,\n  .prism-code .token.inserted {\n    color: ${syntax.string};\n  }\n\n  .prism-code .token.regexp,\n  .prism-code .token.variable {\n    color: ${syntax.regexp};\n  }\n\n  .prism-code .token.keyword,\n  .prism-code .token.atrule,\n  .prism-code .token.tag > .token.punctuation,\n  .prism-code .token.important {\n    color: ${syntax.keyword};\n  }\n\n  .prism-code .token.attr-name {\n    color: ${syntax.number};\n  }\n\n  .prism-code .token.attr-value {\n    color: ${syntax.string};\n  }\n\n  .prism-code .token.markup,\n  .prism-code .token.special {\n    color: ${syntax.predefined};\n  }\n\n  .prism-code .token.comment,\n  .prism-code .token.prolog,\n  .prism-code .token.doctype,\n  .prism-code .token.cdata {\n    color: ${syntax.comment};\n  }\n\n  .prism-code .token.number {\n    color: ${syntax.number};\n  }\n\n  .prism-code .token.constant,\n  .prism-code .token.boolean,\n  .prism-code .token.constant,\n  .prism-code .token.symbol,\n  .prism-code .token.deleted {\n    color: ${syntax.constant};\n  }\n\n  .prism-code .token.operator,\n  .prism-code .token.entity,\n  .prism-code .token.url,\n  .prism-code .language-css .token.string,\n  .prism-code .style .token.string {\n    color: ${syntax.operator};\n  }\n\n  .prism-code .token.punctuation {\n    color: ${syntax.comment};\n  }\n`\n;\nexport const light = theme(lightColors);\nexport const dark = theme(darkColors);\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.11\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\Markdown\\MarkdownPreview.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport classnames from 'classnames';\nimport escape from 'escape-html';\nimport marked from 'marked';\nimport {highlight, languages} from 'prismjs/components/prism-core';\nimport * as React from 'react';\nimport sanitize from 'sanitize-html';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-swift';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-diff';\nimport './markdown.css';\nimport {light, dark} from '../Editor/themes/simple-editor';\nimport {withThemeName, ThemeName} from '../../features/preferences/index';\nimport {c} from '../ThemeProvider';\ntype Props = { \n    source: string;\n    theme: ThemeName;\n};\n\n// use a custom renderer to customize the `a` tag and add `target='_blank'`\nconst renderer = new marked.Renderer();\nrenderer.link = function(args: any) {\n\n    return marked.Renderer.prototype.link.apply(this, args).replace(/^<a/, '<a target=\"_blank\"');\n}\n;\nclass MarkdownPreview extends React.Component<Props> {\n    render() {\n        const {\n            source, \n            theme\n         } = this.props;\n        let html = marked(source, {\n            renderer, \n            gfm: true, \n            silent: true, \n            highlight: (code: string, lang: string) => {\n            \n                const grammar = lang === 'js' ? languages.jsx : languages[lang];\n                const language = lang === 'js' ? 'jsx' : lang;\n                return grammar ? highlight(code, grammar, language) : escape(code);\n            }\n            \n         });\n        html = sanitize(html, require('./santize-config.json'));\n        return  (\n            <React.Fragment\n            >\n                <div\n                 dangerouslySetInnerHTML={{\n                        __html: html\n                     }} className={classnames(css(styles.content), 'markdown-body', 'prism-code')} />\n                <style\n                 type=\"text/css\" dangerouslySetInnerHTML={{\n                        __html: theme === 'dark' ? dark : light\n                     }} />\n            </React.Fragment>\n            )\n        ;\n    }\n}\nexport default withThemeName(MarkdownPreview);\nconst styles = StyleSheet.create({\n    content: {\n        flex: 1, \n        overflow: 'auto', \n        backgroundColor: c('content'), \n        color: c('text'), \n        padding: 40, \n        '--border-color': c('border'), \n        '--blockquote-text-color': c('text'), \n        '--code-background-color': c('hover')\n     }\n });\n"],"sourceRoot":""}